name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  name: pyheck

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python_version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist
      - name: Install built wheel - x86_64
        run: |
          pip install ${{ env.name }} --no-index --find-links dist --force-reinstall
          pip install pytest
          pytest
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist --no-sdist
      - name: Install built wheel - universal2
        run: |
          pip install ${{ env.name }} --no-index --find-links dist --force-reinstall
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
        python_version: ["3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.target }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --no-sdist
      - name: Install built wheel
        run: |
          pip install ${{ env.name }} --no-index --find-links dist --force-reinstall
          pip install pytest
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
        python_version: ["3.9", "3.10"]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python_version }}
        architecture: x64
    - name: Build Wheels
      uses: messense/maturin-action@v1
      with:
        rust-toolchain: nightly
        target: ${{ matrix.target }}
        manylinux: auto
        args: --release --out dist --no-sdist
    - name: Install built wheel
      if: matrix.target == 'x86_64'
      run: |
        pip install ${{ env.name }} --no-index --find-links dist --force-reinstall
        pip install pytest
        pytest
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7, s390x, ppc64le, ppc64]
        python_version: ["3.9", "3.10"]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 
    - name: Build Wheels
      uses: messense/maturin-action@v1
      with:
        rust-toolchain: nightly
        target: ${{ matrix.target }}
        manylinux: auto
        args: --release --out dist --no-sdist
    - uses: uraimo/run-on-arch-action@v2.0.5
      if: matrix.target != 'ppc64'
      name: Install built wheel
      with:
        arch: ${{ matrix.target }}
        distro: ubuntu18.04
        githubToken: ${{ github.token }}
        # Mount the dist directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}/dist:/artifacts"
        install: |
          apt-get update
          apt-get install -y --no-install-recommends wget tar
          echo "running wget"
          wget -qO bin/latest https://micromamba.snakepit.net/api/micromamba/linux-64/latest
          echo "running tar"
          tar -xvjf bin/micromamba
          rm -rf info
          echo "running shell init"
          ./bin/micromamba shell init -s bash -p ~/micromamba
          source ~/.bashrc
          micromamba activate
          micromamba install python=${{ matrix.python_version }}
        run: |
          ls -lrth /artifacts
          python -m pip install ${{ env.name }} --no-index --find-links /artifacts --force-reinstall
          python -m pytest
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist
